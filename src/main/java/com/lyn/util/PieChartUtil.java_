package com.lyn.util;

import com.alibaba.fastjson.JSONObject;
import com.lyn.common.Legend;
import com.lyn.common.Title;
import com.lyn.constant.ChartType;
import com.lyn.constant.Orient;
import com.lyn.constant.Position;
import com.lyn.data.LegendData;
import com.lyn.data.series.PieSeriesData;
import com.lyn.option.PieOption;
import com.lyn.series.PieSeries;

import java.lang.reflect.Field;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PieChartUtil {
    /**
     * 数值格式：纯数值|含百分号的数值
     */
    private static final String DIGIT_OR_PERCENTAGE_PATTERN = "^(\\d+(\\.\\d+)?%?)$";
    private static final String RADIUS_PATTERN = "^(\\d+(\\.\\d+)?%?)(,(\\d+(\\.\\d+)?%?))?$";

    public static PieOption buildPieOption() {
        PieOption pieOption = new PieOption();

            
        return pieOption;
    }
    public static Title buildTitle(String text, String subText, Boolean show) {
        Title title = new Title();
        title.setText(text);
        title.setSubtext(subText);
        title.setShow(show);
        return title;
    }

    /**
     * 创建饼图基本系列
     *
     * @param name   系列名称
     * @param type   默认为饼图系列
     * @param center 饼图圆心位置
     * @param radius 饼图半径
     * @param data   系列中的数值内容数组
     * @return
     */
    public static PieSeries buildPieSeries(String name, ChartType type, Object[] center, String radius, Map<String, Double> data) {
        if (data == null || data.size() <= 0) {
            return null;
        }
        PieSeries pieSeries = new PieSeries();
        pieSeries.setName(name);
        type = type == null ? ChartType.pie : type;
        pieSeries.setType(type);
        if (center != null && center.length == 2) {
            pieSeries.setCenter(center);
        }
        if (radius != null && isRadius(radius)) {
            pieSeries.setRadius(radius);
        }
        List<PieSeriesData> pieSeriesDataList = new ArrayList<>();
        Iterator<Map.Entry<String, Double>> iterator = data.entrySet().stream().iterator();
        while (iterator.hasNext()) {
            Map.Entry<String, Double> next = iterator.next();
            String key = next.getKey();
            Double value = next.getValue();
            PieSeriesData pieSeriesData = new PieSeriesData();
            pieSeriesData.setName(key);
            pieSeriesData.setValue(value);
            pieSeriesDataList.add(pieSeriesData);
        }
        PieSeriesData[] pieSeriesData = new PieSeriesData[pieSeriesDataList.size()];
        pieSeries.setData(pieSeriesDataList.toArray(pieSeriesData));
        return pieSeries;
    }

    /**
     * 判断半径值是否为：数值|百分值|（数值或百分值的数组:容量=2）
     *
     * @param source
     * @return
     */
    private static Boolean isRadius(String source) {
        if ("".equals(source) || source == null) {
            return false;
        }
        if (source.startsWith("[") && source.endsWith("]")) {
            source = source.substring(source.indexOf('[') + 1, source.indexOf(']') - 1);
        }
        Pattern compile = Pattern.compile(RADIUS_PATTERN);
        Matcher matcher = compile.matcher(source);
        return matcher.matches();

    }


    @Deprecated
    public static Legend buildPieLegend(Orient orient, Map<String, Object> position, List<String> data) {
        Legend legend = new Legend();
        orient = orient == null ? Orient.horizontal : orient;
        legend.setOrient(orient);
        //todo 图例位置待定
/*
        Map<String, String> formatPosition = checkFieldAndValue(position, Legend.class);
        Iterator<Map.Entry<String, String>> iterator = formatPosition.entrySet().stream().iterator();
        while (iterator.hasNext()) {
            Map.Entry<String, String> next = iterator.next();
            String field = next.getKey();
            String value = next.getValue();
            legend = (Legend) copyValue(Legend.class, field, value);
        }
*/
        List<LegendData> legendDataList = new ArrayList<>();
        data.stream().forEach(o -> legendDataList.add(new LegendData().name(o)));
        LegendData[] legendData = new LegendData[data.size()];
        legend.setData(legendDataList.toArray(legendData));
        return legend;
    }

    /**
     * 通过反射机制给属性赋值
     *
     * @param clazz
     * @param field
     * @param value
     * @return
     */
    private static Object copyValue(Class clazz, String field, String value) {
        if (clazz == null) {
            return clazz;
        }
        long count = Arrays.stream(clazz.getDeclaredFields()).filter(o -> o.getName().equals(field)).count();
        if (count == 1) {
            try {
                Class<?> aClass = Class.forName(clazz.getName());
                Field declaredField = clazz.getDeclaredField(field);
                declaredField.setAccessible(true);
                declaredField.set(aClass, value);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return copyValue(clazz.getSuperclass(), field, value);
    }

    /**
     * 检查属性字段和对应的值格式，如果字段或者数值格式不匹配，则不赋值，即选择默认值；
     *
     * @param position
     * @param clazz
     * @return
     */
    private static Map<String, String> checkFieldAndValue(Map<String, Object> position, Class clazz) {
        Map<String, String> item = new HashMap<>();
        Iterator<Map.Entry<String, Object>> iterator = position.entrySet().stream().iterator();
        while (iterator.hasNext()) {
            Map.Entry<String, Object> next = iterator.next();
            String field = next.getKey();
            String value = String.valueOf(next.getValue());
            Boolean isFeild = checkField(clazz, field);
            if (!isFeild) {
                continue;
            }
            Boolean digitOrPercentage = isDigitOrPercentage(value);
            if (digitOrPercentage) {
                item.put(field, value);
                continue;
            }
            long count = Arrays.stream(Position.values()).filter(o -> o.name().equals(value)).count();
            if (count == 1) {
                item.put(field, value);
            }
        }
        return item;
    }

    private static Boolean checkField(Class clazz, String field) {
        if (clazz == null) {
            return false;
        }
        Field[] declaredFields = clazz.getDeclaredFields();
        long count = Arrays.stream(declaredFields).filter(o -> o.getName().equals(field)).count();
        if (count == 1) {
            return true;
        }
        return checkField(clazz.getSuperclass(), field);
    }

    private static Boolean isDigitOrPercentage(String value) {
        return Pattern.compile(DIGIT_OR_PERCENTAGE_PATTERN).matcher(value).matches();
    }

    public static void main(String[] args) {
        Boolean letf = checkField(Legend.class, "laeft");
        System.out.println(letf);
        Map<String, Object> map = new HashMap<>();
        map.put("left", Position.left);
        Map<String, String> formatMap = checkFieldAndValue(map, Legend.class);
        System.out.println(formatMap);
        Legend legend = (Legend) copyValue(Legend.class, "left", "left");
        System.out.println(JSONObject.toJSONString(legend));
    }
}
